{-# OPTIONS --without-K --exact-split --safe --no-unicode #-}

module FP.SimplifiedCategories.MonoidObject where

open import TypeTheory.Universes using (Type; ùë¢; usuc; Universe)
open import TypeTheory.SimpleTypes using (OneL; ZeroL; id; id'; _compose_; _andThen_)
open import HoTT.Identity-Types using (refl; _‚â°_)
open import FP.Types using (Function)
open import TypeTheory.FunctionsProperties using (compose-id; id-compose; compose-compose; compose-assoc)
open import FP.Abstractions.Bifunctor using (Bifunctor; BifunctorProduct; BifunctorEither; BifunctorThese)
open import FP.SimplifiedCategories.Category using (Category)
open import TypeTheory.Product using (_√ó_; √óassocLR; √óassocRL
  ; √óleft-id; √óid-left; √óright-id; √óid-right; √óbimap)
open import TypeTheory.Sum using (_+_; +right-id; +left-id; +id-right; +id-left
  ; +assocLR; +assocRL)
open import FP.These using (These)
open import TypeTheory.LogicalEquiv using (_<=>_; <=>-fst)
open import TypeTheory.Product using (_,,_)
open import AbstractAlgebra.Monoid using (Monoid)
open import FP.SimplifiedCategories.MonoidalCategory using (MonoidalCategory)

-- https://ncatlab.org/nlab/show/monoid+in+a+monoidal+category

record MonoidObject (_‚äó_ : Type ùë¢ -> Type ùë¢ -> Type ùë¢) : Type (usuc ùë¢) where
  field
    mc : MonoidalCategory {ùë¢} _‚äó_
  open MonoidalCategory mc

  field
    M : Type ùë¢          -- carrier object
    moUnit    : I -> M
    moCompose : M ‚äó M -> M

  -- utitities
  moUnit-id : (I ‚äó M) -> (M ‚äó M)
  moUnit-id = moUnit ‚äómap id

  id-moUnitId : (M ‚äó I) -> (M ‚äó M)
  id-moUnitId = id ‚äómap moUnit

  id-moCompose :  M ‚äó (M ‚äó M) -> (M ‚äó M)
  id-moCompose = id ‚äómap moCompose

  moCompose-id : (M ‚äó M) ‚äó M -> (M ‚äó M)
  moCompose-id = moCompose ‚äómap id

  -- laws
  field
    mo-associativity-law :
      (moCompose-id andThen              -- (M ‚äó M) ‚äó M  ->  (M ‚äó M)
        moCompose)                       -- M ‚äó M        ->  M
      ‚â°
      ((associator {M} {M} {M}) andThen  -- (M ‚äó M) ‚äó M  ->  M ‚äó (M ‚äó M)
         id-moCompose) andThen           -- M ‚äó (M ‚äó M)  ->  (M ‚äó M)
         moCompose                       -- M ‚äó M        ->  M
    mo-left-identity-law :
      (moUnit-id andThen   -- I -> M
        moCompose)         -- M ‚äó M   ->  M
      ‚â° leftUnitor {M}     -- I ‚äó M   -> A

    mo-right-identity-law :
      (id-moUnitId andThen   -- (M ‚äó I) -> (M ‚äó M)
        moCompose)           -- M ‚äó M   ->  M
      ‚â° rightUnitor {M}      -- (M ‚äó I) -> M
