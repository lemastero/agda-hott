{-# OPTIONS --without-K --exact-split --safe --no-unicode #-}

module FP.PromonadConstruction where

open import TypeTheory.Universes using (Type; ùë¢; usuc; Universe)
open import TypeTheory.SimpleTypes using (Nat; succ; zero; id; _compose_)
open import Arithmetic.Nat-Peano using (_+_; _*_)
open import Arithmetic.Nat-Relations using (_>=_)
open import HoTT.Identity-Types using (refl; _‚â°_)
open import FP.Types using (Function)


-- TODO Theory of Promonads: https://math.stackexchange.com/questions/372380/theory-of-promonads
-- TODO https://arxiv.org/pdf/2001.07488.pdf Definition 4.8
-- TODO https://arxiv.org/pdf/2001.08045.pdf Definition 2.3.1
record Promonad (Morph : Type ùë¢ -> Type ùë¢ -> Type ùë¢) : Type (usuc ùë¢) where
  field
    Unit : forall {A : Type ùë¢} -> Morph A A
    Multi : forall {A B C : Type ùë¢} -> Morph A B -> Morph B C -> Morph A C

record PromonadLowering (F : Type ùë¢ -> Type ùë¢) : Type (usuc ùë¢) where
  field
    -- type
    Morph : Type ùë¢ -> Type ùë¢ -> Type ùë¢ -- uses F to list function into profunctor e.g. (A -> F B) -> Morph A B
    isPromonad : Promonad Morph
    -- operation
    run : forall {A B : Type ùë¢} -> (f : Morph A B) -> F A -> F B

  open Promonad isPromonad

  -- derived definition of laws
  identityLaw : forall {A : Type ùë¢}
             -> (fa : F A)
             -> Type ùë¢
  identityLaw fa = run Unit fa ‚â° fa
  composeLaw  : forall {A B C : Type ùë¢}
             -> (fa : F A)
             -> (f : Morph A B)
             -> (g : Morph B C)
             -> Type ùë¢
  composeLaw fa f g = (run g (run f fa)) ‚â° run (Multi f g) fa

-- TODO Functoriality
-- TODO In what way it is Monad (?)
-- TODO can we show somehow it is Applicative (study B. Milewski 3 equivalent definitions)

-- TODO WIP Notions of computations as Promonad
